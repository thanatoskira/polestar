#!/usr/bin/env python
# -*- encoding: utf-8 -*-

class doNmap:

    def __init__(self, all_ip, arguments):
        self.arguments = arguments
        self.nm = nmap.PortScanner()
        #self.thread_count = len(all_ip)/3 if len(all_ip) % 3 == 0 else len(all_ip)/3 + 1    #每3个ip放在一个线程里
        self.all_ip = all_ip
        #print(all_ip)
        #print(self.thread_count)
        self.hosts = [all_ip[index: index+self.thread_count] for index in range(0, len(all_ip), self.thread_count)]  #将ip根据线程数进行等分
        self.thread = []
        print('Count of All Thread: ' + str(self.thread_count))
        for thread_name in range(self.thread_count):       #根据线程数创建线程
            self.thread.append(threading.Thread(target=self.do_Scan, args=(self.hosts[thread_name],), name=str(thread_name)))
        #print(self.thread)

    def _do_Scan(self, hosts):
        #try:
        hosts = ' '.join(hosts)
        self.result = self.nm.scan(hosts = hosts, arguments = self.arguments)
        self.get_Result()
        """
        except Exception as e:
            print('\033[1;31;40m[-]Thread Start Failure...')
            print('[-]Error: ' + str(e) + '\n\033[0m')
            exit(-1)
        """
                
    def _get_Result(self):
        self.result = self.result['scan']
        for target in self.result:
            print('\n\033[1;32;40m' + target + ' named ')
            print(self.result)
            print(self.result[target])
            target = self.result[target]
            print(target['hostnames']['name'] + ' is ' + target['status']['state'] + '.')
            for tcp_port in target['tcp']:
                state = target['tcp'][tcp_port]['state']
                version = target['tcp'][tcp_port]['version']
                print(tcp_port + '\t' + state + '\t' + version)
                print('\033[0m')

    def _run(self):
        for i in range(self.thread_count):
            print('[*]Thread number ' + str(i) + ' Start')
            self.thread[i].setDaemon(True)
            self.thread[i].start()
            #sleep(1)    #等待线程启动正常
            #if not self.thread[i].isAlive(): #线程启动失败则退出
            #    exit(-1)
        
        for i in range(self.thread_count):
            self.thread[i].join()
        """
        while self.thread[i].isAlive():
            for i in range(3):
                out = '\033[1;33;40m\r[*]Start Namp Scaning' + '.' * (i+1) + ' '*(3-i) + '\033[0m\r'
                sys.stdout.write(out)
                sys.stdout.flush()
                sleep(1)
        """

